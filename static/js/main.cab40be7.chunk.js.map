{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","seePostDetails","selectedPostId","className","length","map","post","userId","title","id","type","onClick","BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","getAllPosts","getUserPosts","getPostDetails","postId","getPostComments","commentsFromServer","postComments","filter","comment","deleteComment","commentId","method","createComment","commentBody","headers","body","JSON","stringify","NewCommentForm","useState","name","setName","email","setEmail","setBody","handleInputChange","event","value","target","onSubmit","preventDefault","placeholder","onChange","PostDetails","setPost","comments","setComments","isCommentsShown","setIsCommentsShown","postFromServer","useEffect","loadPostDetails","loadComments","prevState","App","setPosts","setUserId","setSelectedPostId","getPosts","allPosts","userPosts","htmlFor","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cab40be7.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  seePostDetails: (postId: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, seePostDetails, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.length > 0 && (posts.map(post => (\n        <li\n          className=\"PostsList__item\"\n          key={post.id}\n        >\n          <div>\n            <b>\n              {`[User ${post.userId}]:`}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => seePostDetails(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => seePostDetails(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      )))}\n    </ul>\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const request = async (url: string) => {\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n\nexport const getAllPosts = async () => {\n  return request(`${BASE_URL}/posts`);\n};\n\nexport const getUserPosts = async (userId: number) => {\n  return request(`${BASE_URL}/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`${BASE_URL}/posts/${postId}`);\n};\n","import { BASE_URL } from './api';\nimport { request } from './posts';\n\nexport const getPostComments = async (postId: number) => {\n  const commentsFromServer: Comment[] = await request(`${BASE_URL}/comments`);\n\n  const postComments = commentsFromServer.filter(comment => comment.postId === postId);\n\n  return postComments;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const createComment = async (commentBody: CommentBody) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(commentBody),\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n};\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value } = event.target;\n\n    switch (event.target.name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n    }\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    createComment({\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    clearForm();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>();\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCommentsShown, setIsCommentsShown] = useState(true);\n\n  async function loadPostDetails() {\n    const postFromServer: Post = await getPostDetails(postId);\n\n    setPost(postFromServer);\n  }\n\n  async function loadComments() {\n    const commentsFromServer: Comment[] = await getPostComments(postId);\n\n    setComments(commentsFromServer);\n  }\n\n  useEffect(() => {\n    loadPostDetails();\n    loadComments();\n  }, [postId, comments]);\n\n  const handleShowCommentsButton = () => {\n    setIsCommentsShown(prevState => !prevState);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {post ? (\n        <>\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>\n              {post.title}\n            </p>\n          </section>\n\n          {comments?.length ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={handleShowCommentsButton}\n                >\n                  {isCommentsShown\n                    ? `Hide ${comments.length} comments`\n                    : `Show ${comments.length} comments`}\n                </button>\n\n                {isCommentsShown && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        className=\"PostDetails__list-item\"\n                        key={comment.id}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => deleteComment(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n            </>\n          ) : (\n            <h3>No comments</h3>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm postId={postId} />\n            </div>\n          </section>\n        </>\n      ) : (<h2>Post not found</h2>)}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    const getPosts = async () => {\n      if (userId === 0) {\n        const allPosts = await getAllPosts();\n\n        setPosts(allPosts);\n      } else {\n        const userPosts = await getUserPosts(userId);\n\n        setPosts(userPosts);\n      }\n    };\n\n    getPosts();\n  }, [userId]);\n\n  const changePostDetailVisability = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(Number(event.target.value));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"selecteUser\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"selecteUser\"\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            seePostDetails={changePostDetailVisability}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId > 0 && (<PostDetails postId={selectedPostId} />)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}