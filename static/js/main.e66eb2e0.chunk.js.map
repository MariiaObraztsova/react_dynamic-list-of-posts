{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","seePostDetails","selectedPostId","className","length","map","post","userId","title","id","type","onClick","BASE_URL","request","url","a","fetch","response","ok","Error","status","statusText","json","getCommentsByPostId","postId","commentsFromServer","filter","comment","deleteComment","commentId","method","createComment","commentBody","headers","body","JSON","stringify","getAllPosts","getPostsByUserId","getPostDetailsByPostId","NewCommentForm","updateComments","useState","name","setName","email","setEmail","setBody","handleInputChange","event","value","target","handleFormSubmit","preventDefault","onSubmit","placeholder","onChange","PostDetails","setPost","comments","setComments","isCommentsShown","setIsCommentsShown","postFromServer","loadComments","useEffect","loadPostDetails","handleDeletingCommentButton","prevIsCommentsShown","getAllUsers","App","setPosts","users","setUsers","setUserId","setSelectedPostId","getPosts","Promise","all","allPosts","usersFromServer","preparedUsers","user","find","userPosts","changePostDetailVisability","useCallback","htmlFor","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e66eb2e0.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  seePostDetails: (postId: number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(\n  ({ posts, seePostDetails, selectedPostId }) => (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length > 0 && (posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User ${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => seePostDetails(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => seePostDetails(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        )))}\n      </ul>\n    </div>\n  ),\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  try {\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`The problem is here ${error}`);\n  }\n};\n","import { BASE_URL, request } from './api';\n\nexport const getCommentsByPostId = async (postId: number): Promise<Comment[]> => {\n  const commentsFromServer: Comment[] = await request(`${BASE_URL}/comments`);\n\n  return commentsFromServer.filter(comment => comment.postId === postId);\n};\n\nexport const deleteComment = async (commentId: number): Promise<Comment> => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const createComment = async (commentBody: CommentBody) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(commentBody),\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import { BASE_URL, request } from './api';\n\nexport const getAllPosts = async () => {\n  return request(`${BASE_URL}/posts`);\n};\n\nexport const getPostsByUserId = async (userId: number): Promise<Post[]> => {\n  return request(`${BASE_URL}/posts?userId=${userId}`);\n};\n\nexport const getPostDetailsByPostId = (postId: number): Promise<Post> => {\n  return request(`${BASE_URL}/posts/${postId}`);\n};\n","import React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  updateComments: () => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(\n  ({ postId, updateComments }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [body, setBody] = useState('');\n\n    const handleInputChange = (event:\n    React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const { value } = event.target;\n\n      switch (event.target.name) {\n        case 'name':\n          setName(value);\n          break;\n        case 'email':\n          setEmail(value);\n          break;\n        case 'body':\n          setBody(value);\n          break;\n        default:\n      }\n    };\n\n    const clearForm = () => {\n      setName('');\n      setEmail('');\n      setBody('');\n    };\n\n    const handleFormSubmit = async (event: React.FormEvent) => {\n      event.preventDefault();\n\n      const createdComment = await createComment({\n        postId,\n        name,\n        email,\n        body,\n      });\n\n      if (createdComment) {\n        updateComments();\n      }\n\n      clearForm();\n    };\n\n    return (\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Your name\"\n            className=\"NewCommentForm__input\"\n            onChange={handleInputChange}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n            onChange={handleInputChange}\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className=\"NewCommentForm__input\"\n            onChange={handleInputChange}\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n    );\n  },\n);\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getCommentsByPostId } from '../../api/comments';\nimport { getPostDetailsByPostId } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(\n  ({ postId }) => {\n    const [post, setPost] = useState<Post | null>();\n    const [comments, setComments] = useState<Comment[] | null>(null);\n    const [isCommentsShown, setIsCommentsShown] = useState(true);\n\n    async function loadPostDetails() {\n      const postFromServer: Post = await getPostDetailsByPostId(postId);\n\n      setPost(postFromServer);\n    }\n\n    const loadComments = async () => {\n      const commentsFromServer: Comment[] = await getCommentsByPostId(postId);\n\n      setComments(commentsFromServer);\n    };\n\n    useEffect(() => {\n      loadPostDetails();\n      loadComments();\n    }, [postId]);\n\n    const handleShowCommentsButton = () => {\n      setIsCommentsShown(prevIsCommentsShown => !prevIsCommentsShown);\n    };\n\n    const handleDeletingCommentButton = async (commentId: number) => {\n      const deletedComment = await deleteComment(commentId);\n\n      if (deletedComment) {\n        loadComments();\n      }\n    };\n\n    return (\n      <div className=\"PostDetails\">\n        {post ? (\n          <>\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>\n                {post.title}\n              </p>\n            </section>\n\n            {comments?.length ? (\n              <>\n                <section className=\"PostDetails__comments\">\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={handleShowCommentsButton}\n                  >\n                    {isCommentsShown\n                      ? `Hide ${comments.length} comments`\n                      : `Show ${comments.length} comments`}\n                  </button>\n\n                  {isCommentsShown && (\n                    <ul className=\"PostDetails__list\">\n                      {comments.map(comment => (\n                        <li\n                          className=\"PostDetails__list-item\"\n                          key={comment.id}\n                        >\n                          <button\n                            type=\"button\"\n                            className=\"PostDetails__remove-button button\"\n                            onClick={() => handleDeletingCommentButton(comment.id)}\n                          >\n                            X\n                          </button>\n                          <p>{comment.name}</p>\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                </section>\n              </>\n            ) : (\n              <h3>No comments</h3>\n            )}\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  postId={postId}\n                  updateComments={loadComments}\n                />\n              </div>\n            </section>\n          </>\n        ) : (<h2>Post not found</h2>)}\n      </div>\n    );\n  },\n);\n","import { BASE_URL, request } from './api';\n\nexport const getAllUsers = async () => {\n  return request(`${BASE_URL}/users`);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getPostsByUserId } from './api/posts';\nimport { getAllUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    const getPosts = async () => {\n      if (userId === 0) {\n        const [allPosts, usersFromServer] = await Promise.all([\n          getAllPosts(),\n          getAllUsers(),\n        ]);\n        const preparedUsers = usersFromServer.filter(\n          (user: User) => allPosts.find((post: Post) => post.userId === user.id),\n        );\n\n        setPosts(allPosts);\n        setUsers(preparedUsers);\n      } else {\n        const userPosts = await getPostsByUserId(userId);\n\n        setPosts(userPosts);\n      }\n    };\n\n    getPosts();\n  }, [userId]);\n\n  const changePostDetailVisability = useCallback(\n    (postId: number) => {\n      setSelectedPostId(postId);\n    }, [],\n  );\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(Number(event.target.value));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"selecteUser\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"selecteUser\"\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\">All users</option>\n\n            {users.map(user => (\n              <option value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            seePostDetails={changePostDetailVisability}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId > 0 && (<PostDetails postId={selectedPostId} />)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}